// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TheaterAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006160709_UpdateActionHistoryAndUtc")]
    partial class UpdateActionHistoryAndUtc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActionHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("action_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("entity_id")
                        .HasColumnType("integer");

                    b.Property<string>("entity_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("metadata")
                        .HasColumnType("text");

                    b.Property<string>("new_value")
                        .HasColumnType("text");

                    b.Property<string>("old_value")
                        .HasColumnType("text");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("ActionHistory");
                });

            modelBuilder.Entity("Hall", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("capacity")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Spectacle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("duration")
                        .HasColumnType("interval");

                    b.Property<int?>("hall_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("money_earned")
                        .HasColumnType("numeric");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("seats_booked")
                        .HasColumnType("integer");

                    b.Property<int>("seats_bought")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("hall_id");

                    b.ToTable("Spectacles");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("reserved_until")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("seat")
                        .HasColumnType("integer");

                    b.Property<int>("spectacle_id")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("spectacle_id");

                    b.HasIndex("user_id");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasCheckConstraint("ck_ticket_reserved_until", "(status != 'reserved' AND reserved_until IS NULL) OR (status = 'reserved' AND reserved_until IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("blocked_until")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("is_blocked")
                        .HasColumnType("boolean");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("ck_user_blocked_until", "(is_blocked = false AND blocked_until IS NULL) OR (is_blocked = true AND blocked_until IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("UserVisit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("seat")
                        .HasColumnType("integer");

                    b.Property<int>("spectacle_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("visit_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("spectacle_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserVisits");
                });

            modelBuilder.Entity("ActionHistory", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("user");
                });

            modelBuilder.Entity("Spectacle", b =>
                {
                    b.HasOne("Hall", "hall")
                        .WithMany()
                        .HasForeignKey("hall_id");

                    b.Navigation("hall");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Spectacle", "spectacle")
                        .WithMany()
                        .HasForeignKey("spectacle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("spectacle");

                    b.Navigation("user");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Role", "role")
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("UserVisit", b =>
                {
                    b.HasOne("Spectacle", "spectacle")
                        .WithMany()
                        .HasForeignKey("spectacle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("spectacle");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
